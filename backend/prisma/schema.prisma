// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @unique @default(autoincrement())
  name            String    @unique
  email           String    @unique
  // a supprimer sauf si sure qu'utile pour nous
  hash            String
  // default a supprimer, le choix de l'avatar par defaut se fait au niveau du signup
  avatar          String    @default("default")
  skin            Skin      @relation(fields:[skinid], references: [id])
  elo             Int       @default(0)
  twoFactAuth     Boolean   @default(false)
  twoFactSecret   String?
  channels        Channel[] @relation("userchannels")
  gamesPlayed     Game[]    @relation("gamesplayed")
  gamesWon        Game[]    @relation("gameswon")
  friends         User[]    @relation("friendship")
  blocked         User[]    @relation("blocked")
// les champs ci-dessous sont neccessaires pour les relations
// mais ne sont pas accessibles par le client Prisma
  mirrorOperators Channel[] @relation("chanops") @ignore
  mirrorFriends   User[]    @relation("friendship")@ignore
  mirrorBlocked   User[]    @relation("blocked")@ignore
  mirrorDms       DM[]      @relation("userdms")@ignore
  mirrorSender    ChannelMessage[] @relation("usermessage")@ignore
// les champs ci-dessous sont neccessaires pour les relations
// mais n'existent pas reellement dans la bdd (foreign keys)
  skinid          Int
}

model Channel {
  id        Int       @id @unique @default(autoincrement())
  name      String?   @unique
  chantype  ChanType  @default(public)
  password  String?
  members   User[]    @relation("userchannels")
  operators User[]    @relation("chanops")
  messages  ChannelMessage[] @relation("channelmessage")
}

model ChannelMessage {
  id        Int     @id @unique @default(autoincrement())
  sender    User    @relation("usermessage", fields: [senderid], references: [id])
  channel   Channel @relation("channelmessage", fields:[channelid], references: [id])
  datetime  DateTime
  Content   String
// les champs ci-dessous sont neccessaires pour les relations
// mais n'existent pas reellement dans la bdd (foreign keys)
  senderid  Int
  channelid Int
}

model DM {
  id        Int       @id @unique // faire un id composite des deux users
  users     User[]    @relation("userdms")
  datetime  DateTime
  Content   String
}

model Game {
  id        Int     @id @unique @default(autoincrement())
  players   User[]  @relation("gamesplayed")
  winner    User    @relation("gameswon", fields:[winnerid], references: [id])
  scores    Int[]
  datetime  DateTime
// les champs ci-dessous sont neccessaires pour les relations
// mais n'existent pas reellement dans la bdd (foreign keys)
  winnerid  Int
}

model Skin {
  id    Int     @id @unique @default(autoincrement())
  name  String  @unique
  url   String  @unique
  users User[]
}

enum ChanType {
  public
  private
  protected
}

// changer l'id sous forme de uid
// envoyer le format de datetime qui est stocke dans la bdd